/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RemixInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "collectiblePrice()": FunctionFragment;
    "countdownTime()": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "harvestRoyalties(address)": FunctionFragment;
    "hasBeenMinted()": FunctionFragment;
    "increasePoints()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "licenseActive(address)": FunctionFragment;
    "minPurchasePrice()": FunctionFragment;
    "purchaseCollectible()": FunctionFragment;
    "purchaseRmx(address)": FunctionFragment;
    "requestDerivative(address)": FunctionFragment;
    "royalties()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "splitAddresses(uint256)": FunctionFragment;
    "splits(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectiblePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countdownTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestRoyalties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBeenMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseActive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minPurchasePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCollectible",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "purchaseRmx", values: [string]): string;
  encodeFunctionData(
    functionFragment: "requestDerivative",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "royalties", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "splitAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "splits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectiblePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countdownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasBeenMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenseActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPurchasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseRmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDerivative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royalties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BadgeIssued(uint256,address)": EventFragment;
    "DerivativeIssued(uint256,address)": EventFragment;
    "Finalized(bool)": EventFragment;
    "ParentAdded(address)": EventFragment;
    "RMXCountdownStarted(address,uint256)": EventFragment;
    "RMXPurchased(uint256,uint256)": EventFragment;
    "RoyaltiesHarvested(address[],uint256[])": EventFragment;
    "RoyaltyReceived(uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BadgeIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DerivativeIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RMXCountdownStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RMXPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesHarvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export class Remix extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RemixInterface;

  functions: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    collectiblePrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "collectiblePrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    countdownTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countdownTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    harvestRoyalties(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvestRoyalties(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasBeenMinted(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "hasBeenMinted()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    increasePoints(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "increasePoints()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    licenseActive(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "licenseActive(address)"(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    minPurchasePrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minPurchasePrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    purchaseCollectible(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchaseCollectible()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    purchaseRmx(
      _currentOwner: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchaseRmx(address)"(
      _currentOwner: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    requestDerivative(
      _minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestDerivative(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    royalties(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "royalties()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    splitAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "splitAddresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    splits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "splits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  collectiblePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "collectiblePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  countdownTime(overrides?: CallOverrides): Promise<BigNumber>;

  "countdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "exists(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  harvestRoyalties(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvestRoyalties(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasBeenMinted(overrides?: CallOverrides): Promise<boolean>;

  "hasBeenMinted()"(overrides?: CallOverrides): Promise<boolean>;

  increasePoints(overrides?: CallOverrides): Promise<BigNumber>;

  "increasePoints()"(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  licenseActive(_holder: string, overrides?: CallOverrides): Promise<boolean>;

  "licenseActive(address)"(
    _holder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minPurchasePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "minPurchasePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseCollectible(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchaseCollectible()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  purchaseRmx(
    _currentOwner: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchaseRmx(address)"(
    _currentOwner: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  requestDerivative(
    _minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestDerivative(address)"(
    _minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  royalties(overrides?: CallOverrides): Promise<BigNumber>;

  "royalties()"(overrides?: CallOverrides): Promise<BigNumber>;

  royaltyInfo(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    receiver: string;
    royaltyAmount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "royaltyInfo(uint256,uint256)"(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    receiver: string;
    royaltyAmount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  splitAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "splitAddresses(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  splits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "splits(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    collectiblePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "collectiblePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    countdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "countdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    harvestRoyalties(_token: string, overrides?: CallOverrides): Promise<void>;

    "harvestRoyalties(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasBeenMinted(overrides?: CallOverrides): Promise<boolean>;

    "hasBeenMinted()"(overrides?: CallOverrides): Promise<boolean>;

    increasePoints(overrides?: CallOverrides): Promise<BigNumber>;

    "increasePoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    licenseActive(_holder: string, overrides?: CallOverrides): Promise<boolean>;

    "licenseActive(address)"(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minPurchasePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "minPurchasePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseCollectible(overrides?: CallOverrides): Promise<void>;

    "purchaseCollectible()"(overrides?: CallOverrides): Promise<void>;

    purchaseRmx(
      _currentOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseRmx(address)"(
      _currentOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestDerivative(
      _minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestDerivative(address)"(
      _minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    royalties(overrides?: CallOverrides): Promise<BigNumber>;

    "royalties()"(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    splitAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "splitAddresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    splits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "splits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    BadgeIssued(tokenId: null, dst: null): EventFilter;

    DerivativeIssued(tokenId: null, dst: null): EventFilter;

    Finalized(success: null): EventFilter;

    ParentAdded(parent: null): EventFilter;

    RMXCountdownStarted(holder: null, expiration: null): EventFilter;

    RMXPurchased(tokenId: null, amount: null): EventFilter;

    RoyaltiesHarvested(recipients: null, amounts: null): EventFilter;

    RoyaltyReceived(amount: null): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectiblePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "collectiblePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    countdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "countdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestRoyalties(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "harvestRoyalties(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasBeenMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "hasBeenMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    increasePoints(overrides?: CallOverrides): Promise<BigNumber>;

    "increasePoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licenseActive(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "licenseActive(address)"(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPurchasePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "minPurchasePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseCollectible(overrides?: PayableOverrides): Promise<BigNumber>;

    "purchaseCollectible()"(overrides?: PayableOverrides): Promise<BigNumber>;

    purchaseRmx(
      _currentOwner: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "purchaseRmx(address)"(
      _currentOwner: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    requestDerivative(
      _minter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestDerivative(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    royalties(overrides?: CallOverrides): Promise<BigNumber>;

    "royalties()"(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    splitAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "splitAddresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "splits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectiblePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collectiblePrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countdownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countdownTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestRoyalties(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvestRoyalties(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasBeenMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasBeenMinted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "increasePoints()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    licenseActive(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "licenseActive(address)"(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPurchasePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minPurchasePrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseCollectible(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchaseCollectible()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    purchaseRmx(
      _currentOwner: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchaseRmx(address)"(
      _currentOwner: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    requestDerivative(
      _minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestDerivative(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    royalties(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "royalties()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    splitAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "splitAddresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "splits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
